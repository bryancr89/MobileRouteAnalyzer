package net.chirripo.entities;

import java.util.List;
import net.chirripo.entities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ROUTES.
 */
public class Routes {

    private Long id;
    /** Not-null value. */
    private String name;
    private double latStart;
    private double lngStart;
    private double latStop;
    private double lngStop;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RoutesDao myDao;

    private List<RunRoutes> fk_route_runRoutes;
    private List<WayPoints> fk_route_waypoints;
    private List<WayPoints> fk_runRoute_waypoints;

    public Routes() {
    }

    public Routes(Long id) {
        this.id = id;
    }

    public Routes(Long id, String name, double latStart, double lngStart, double latStop, double lngStop) {
        this.id = id;
        this.name = name;
        this.latStart = latStart;
        this.lngStart = lngStart;
        this.latStop = latStop;
        this.lngStop = lngStop;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRoutesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public double getLatStart() {
        return latStart;
    }

    public void setLatStart(double latStart) {
        this.latStart = latStart;
    }

    public double getLngStart() {
        return lngStart;
    }

    public void setLngStart(double lngStart) {
        this.lngStart = lngStart;
    }

    public double getLatStop() {
        return latStop;
    }

    public void setLatStop(double latStop) {
        this.latStop = latStop;
    }

    public double getLngStop() {
        return lngStop;
    }

    public void setLngStop(double lngStop) {
        this.lngStop = lngStop;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RunRoutes> getFk_route_runRoutes() {
        if (fk_route_runRoutes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RunRoutesDao targetDao = daoSession.getRunRoutesDao();
            List<RunRoutes> fk_route_runRoutesNew = targetDao._queryRoutes_Fk_route_runRoutes(id);
            synchronized (this) {
                if(fk_route_runRoutes == null) {
                    fk_route_runRoutes = fk_route_runRoutesNew;
                }
            }
        }
        return fk_route_runRoutes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFk_route_runRoutes() {
        fk_route_runRoutes = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<WayPoints> getFk_route_waypoints() {
        if (fk_route_waypoints == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WayPointsDao targetDao = daoSession.getWayPointsDao();
            List<WayPoints> fk_route_waypointsNew = targetDao._queryRoutes_Fk_route_waypoints(id);
            synchronized (this) {
                if(fk_route_waypoints == null) {
                    fk_route_waypoints = fk_route_waypointsNew;
                }
            }
        }
        return fk_route_waypoints;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFk_route_waypoints() {
        fk_route_waypoints = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<WayPoints> getFk_runRoute_waypoints() {
        if (fk_runRoute_waypoints == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WayPointsDao targetDao = daoSession.getWayPointsDao();
            List<WayPoints> fk_runRoute_waypointsNew = targetDao._queryRoutes_Fk_runRoute_waypoints(id);
            synchronized (this) {
                if(fk_runRoute_waypoints == null) {
                    fk_runRoute_waypoints = fk_runRoute_waypointsNew;
                }
            }
        }
        return fk_runRoute_waypoints;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFk_runRoute_waypoints() {
        fk_runRoute_waypoints = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
