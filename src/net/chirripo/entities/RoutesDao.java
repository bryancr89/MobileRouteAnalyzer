package net.chirripo.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.chirripo.entities.Routes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ROUTES.
*/
public class RoutesDao extends AbstractDao<Routes, Long> {

    public static final String TABLENAME = "ROUTES";

    /**
     * Properties of entity Routes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property LatStart = new Property(2, double.class, "latStart", false, "LAT_START");
        public final static Property LngStart = new Property(3, double.class, "lngStart", false, "LNG_START");
        public final static Property LatStop = new Property(4, double.class, "latStop", false, "LAT_STOP");
        public final static Property LngStop = new Property(5, double.class, "lngStop", false, "LNG_STOP");
        public final static Property Distance = new Property(6, double.class, "distance", false, "DISTANCE");
        public final static Property Duration = new Property(7, double.class, "duration", false, "DURATION");
    };

    private DaoSession daoSession;


    public RoutesDao(DaoConfig config) {
        super(config);
    }
    
    public RoutesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ROUTES' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'LAT_START' REAL NOT NULL ," + // 2: latStart
                "'LNG_START' REAL NOT NULL ," + // 3: lngStart
                "'LAT_STOP' REAL NOT NULL ," + // 4: latStop
                "'LNG_STOP' REAL NOT NULL ," + // 5: lngStop
                "'DISTANCE' REAL NOT NULL ," + // 6: distance
                "'DURATION' REAL NOT NULL );"); // 7: duration
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ROUTES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Routes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindDouble(3, entity.getLatStart());
        stmt.bindDouble(4, entity.getLngStart());
        stmt.bindDouble(5, entity.getLatStop());
        stmt.bindDouble(6, entity.getLngStop());
        stmt.bindDouble(7, entity.getDistance());
        stmt.bindDouble(8, entity.getDuration());
    }

    @Override
    protected void attachEntity(Routes entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Routes readEntity(Cursor cursor, int offset) {
        Routes entity = new Routes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getDouble(offset + 2), // latStart
            cursor.getDouble(offset + 3), // lngStart
            cursor.getDouble(offset + 4), // latStop
            cursor.getDouble(offset + 5), // lngStop
            cursor.getDouble(offset + 6), // distance
            cursor.getDouble(offset + 7) // duration
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Routes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setLatStart(cursor.getDouble(offset + 2));
        entity.setLngStart(cursor.getDouble(offset + 3));
        entity.setLatStop(cursor.getDouble(offset + 4));
        entity.setLngStop(cursor.getDouble(offset + 5));
        entity.setDistance(cursor.getDouble(offset + 6));
        entity.setDuration(cursor.getDouble(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Routes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Routes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
